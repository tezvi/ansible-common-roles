---

- block:
  - command: 'lxc exec {{ lxc_instance.name }} -- which bbb-conf'
    ignore_errors: true
    register: bbb_lxc_installed_stat

  # Fix broken symlinks to prevent DPKG configure problems if BBB upgrading
  - name: '{{ lxc_instance.name }}: Fix potential BBB nginx bad symlinks'
    command: >
      lxc exec {{ lxc_instance.name }} -- bash -c
      "[[ -f /etc/nginx/sites-enabled/{{ item }} && ! -L /etc/nginx/sites-enabled/{{ item }} ]] && (rm /etc/nginx/sites-enabled/{{ item }}; ln -s /etc/nginx/sites-available/{{ item }} /etc/nginx/sites-enabled/{{ item }}) || echo"
    with_items:
      - bigbluebutton
      - default

  - name: '{{ lxc_instance.name }}: Install BBB'
    command:
      cmd: "lxc exec {{ lxc_instance.name }} -- sh -c '{{ item }}'"
    retries: 0
    with_items:
      - 'wget -O /root/bbb-install.sh {{ bbb_lxc_bbb_install_url }}'
      - '/bin/bash /root/bbb-install.sh -v {{ lxc_instance.bbb_version }} -w -s {{ lxc_instance.hostname }} -e {{ lxc_instance.email }}'
      # Install homedir skeleton if omitted by installer script. This might pile web error logs.
      - 'mkhomedir_helper bigbluebutton'
      - 'mkdir -p /home/bigbluebutton/.cache/dconf'
#      - 'apt-get purge bbb-demo -y || echo "no BBB demos installed"'
      - 'apt-get autoremove -y'
    when: bbb_lxc_force_bbb_install|bool or bbb_lxc_installed_stat.rc != 0

  - import_tasks: link_bbb_dir.yml

    # Install homedir skeleton if omitted by installer script. This might pile web error logs.
  - name: '{{ lxc_instance.name }}: Fix bigbluebutton user homedir skeleton for'
    command:
      cmd: 'lxc exec {{ lxc_instance.name }} -- {{ item }}'
    with_items:
      - 'mkhomedir_helper bigbluebutton'
      - 'mkdir -p /home/bigbluebutton/.cache/dconf'
      - 'chown -R bigbluebutton:bigbluebutton /home/bigbluebutton/.cache'

  - set_fact:
      bbb_template_files:
        - src: '{{ bbb_lxc_bbb_properties_file }}'
          dest: '{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_bigbluebutton.properties'
        - src: '{{ bbb_lxc_bbb_properties_file }}'
          dest: '{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_freeswitch_vars.xml'
        - src: '{{ bbb_lxc_bbb_html5unit_file }}'
          dest: '{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_bbb-html5.service'
    when: lxc_instance.bbb_version == 'xenial-22'

  - set_fact:
      bbb_template_files:
        - src: '{{ bbb_lxc_bbb_properties_file }}'
          dest: '{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_bigbluebutton.properties'
        - src: '{{ bbb_lxc_bbb_freeswitch_config_file }}'
          dest: '{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_freeswitch_vars.xml'
        - src: '{{ bbb_lxc_systemd_unit_dir }}/bbb-html5-backend@.service'
          dest: '{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_bbb-html5-backend@.service'
        - src: '{{ bbb_lxc_systemd_unit_dir }}/bbb-html5-frontend@.service'
          dest: '{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_bbb-html5-frontend@.service'
        - src: '/lib/systemd/system/freeswitch.service'
          dest: '{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_freeswitch.service'
    when: >
      lxc_instance.bbb_version == 'bionic-23' or lxc_instance.bbb_version == 'bionic-24'
      or lxc_instance.bbb_version == 'focal-270'

  - name: '{{ lxc_instance.name }}: Copy BBB config files to host for provisioning'
    command:
      cmd: 'lxc file pull {{ lxc_instance.name }}{{ item.src }} {{ item.dest }}'
    with_items: "{{ bbb_template_files }}"

  - name: '{{ lxc_instance.name }}: Make backups of template source files'
    copy:
      src: "{{ item.dest }}"
      dest: "{{ item.dest }}.orig"
      remote_src: true
    with_items: "{{ bbb_template_files }}"

  - name: '{{ lxc_instance.name }}: Provision BBB properties file'
    lineinfile:
      dest: "{{ bbb_template_files[0].dest }}"
      regexp: "{{ item.find }}"
      line: "{{ item.replace }}"
      state: present
    with_items:
      - find: 'lockSettingsDisablePrivateChat=false'
        replace: 'lockSettingsDisablePrivateChat=true'
      - find: 'webcamsOnlyForModerator=false'
        replace: 'webcamsOnlyForModerator=true'
      - find: 'lockSettingsDisableNote=false'
        replace: 'lockSettingsDisableNote=true'
      - find: 'lockSettingsHideUserList=false'
        replace: 'lockSettingsHideUserList=true'
      - find: 'endWhenNoModerator=false'
        replace: 'endWhenNoModerator=true'
      - find: 'breakoutRoomsRecord=true'
        replace: 'breakoutRoomsRecord=false'
      - find: 'disableRecordingDefault=true'
        replace: 'disableRecordingDefault=false'
      - find: 'muteOnStart=false'
        replace: 'muteOnStart=true'
    when: lxc_instance.bbb_version != 'focal-270'

  - name: '{{ lxc_instance.name }}: Provision BBB properties file'
    lineinfile:
      dest: "{{ bbb_template_files[0].dest }}"
      regexp: "{{ item.find }}"
      line: "{{ item.replace }}"
      state: present
    with_items:
      - find: 'lockSettingsDisablePrivateChat=false'
        replace: 'lockSettingsDisablePrivateChat=true'
      - find: 'webcamsOnlyForModerator=false'
        replace: 'webcamsOnlyForModerator=true'
      - find: 'lockSettingsDisableNotes=false'
        replace: 'lockSettingsDisableNotes=true'
      - find: 'lockSettingsHideUserList=false'
        replace: 'lockSettingsHideUserList=true'
      - find: 'endWhenNoModerator=false'
        replace: 'endWhenNoModerator=true'
      - find: 'breakoutRoomsRecord=true'
        replace: 'breakoutRoomsRecord=false'
      - find: 'disableRecordingDefault=true'
        replace: 'disableRecordingDefault=false'
      - find: 'muteOnStart=false'
        replace: 'muteOnStart=true'
    when: lxc_instance.bbb_version == 'focal-270'

  - name: '{{ lxc_instance.name }}: Provision BBB html5 unit file'
    lineinfile:
      dest: "{{ item.0.dest }}"
      regexp: "{{ item.1.find }}"
      line: "{{ item.1.replace }} # lxc defused"
      state: present
      backrefs: yes
    when: bbb_systemd_containerize_units
    with_nested:
      - "{{ bbb_template_files[2:] }}"
      - [
          {find: 'IOSchedulingClass=realtime', replace: '#IOSchedulingClass=realtime'},
          {find: 'CPUSchedulingPolicy=(fifo|rr)', replace: '#CPUSchedulingPolicy=\1'}
         ]

  - name: '{{ lxc_instance.name }}: Provision Freeswitch public ip'
    replace:
      dest: "{{ bbb_template_files[1].dest }}"
      regexp: '"local_ip_v4=([\.\d]+)"'
      replace: '"local_ip_v4={{ lxc_instance.ip_address }}"'

  - command:
      cmd: 'diff {{ item.dest }} {{ item.dest }}.orig'
    register: bbb_lxc_config_diff
    ignore_errors: true
    with_items: "{{ bbb_template_files }}"

  - name: '{{ lxc_instance.name }}: Push new BBB properties file'
    command:
      cmd: "lxc {{ item.0 | replace('%FILE%', item.1.src) | replace('%SRC%', item.1.dest) }}"
    with_nested:
      - ['exec {{ lxc_instance.name }} -- cp -f %FILE% %FILE%.bak-{{ ansible_date_time.epoch }}',
          'file push %SRC% {{ lxc_instance.name }}%FILE%']
      - "{{ bbb_template_files[0:0] }}"
    register: bbb_lxc_properties_changed_stat
    when: bbb_lxc_config_diff.results[0].rc != 0

  - name: '{{ lxc_instance.name }}: Push new BBB HTML5 systemd unit files'
    command:
      cmd: "lxc {{ item.0 | replace('%FILE%', item.1.src) | replace('%SRC%', item.1.dest) }}"
    with_nested:
      - ['exec {{ lxc_instance.name }} -- cp -f %FILE% %FILE%.bak-{{ ansible_date_time.epoch }}',
         'file push %SRC% {{ lxc_instance.name }}%FILE%',
         'exec {{ lxc_instance.name }} -- systemctl daemon-reload']
      - "{{ bbb_template_files[2:] }}"
    register: bbb_lxc_html5_changed_stat
    when: > 
      bbb_systemd_containerize_units 
        and (bbb_lxc_config_diff.results[2].rc != 0 or bbb_lxc_config_diff.results[3].rc|default(0) != 0)

  - name: '{{ lxc_instance.name }}: Push new Freeswitch config file'
    command:
      cmd: "lxc {{ item.0 | replace('%FILE%', item.1.src) | replace('%SRC%', item.1.dest) }}"
    with_nested:
      - ['exec {{ lxc_instance.name }} -- cp -f %FILE% %FILE%.bak-{{ ansible_date_time.epoch }}',
         'file push %SRC% {{ lxc_instance.name }}%FILE%']
      - "{{ bbb_template_files[1:2] }}"
    register: bbb_lxc_freeswitch_changed_stat
    when: bbb_lxc_config_diff.results[1].rc != 0

  - command: "lxc exec {{ lxc_instance.name }} -- grep '{{ bbb_lxc_bbb_redirect_url }}' {{ bbb_lxc_bbb_index_file }}"
    ignore_errors: true
    register: bbb_lxc_index_placeholder_stat

  - name: '{{ lxc_instance.name }}: Copy default BBB index placeholder'
    template:
      src: bbb/index.html.j2
      dest: "{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_index.html"
      mode: 0644
    when: bbb_lxc_bbb_redirect_url|length and bbb_lxc_index_placeholder_stat.rc != 0

  - name: '{{ lxc_instance.name }}: Push default BBB index placeholder to container'
    command: 'lxc {{ item }}'
    with_items:
      - 'exec {{ lxc_instance.name }} -- mv {{ bbb_lxc_bbb_index_file }} {{ bbb_lxc_bbb_index_file }}.orig'
      - 'file push {{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_index.html {{ lxc_instance.name }}{{ bbb_lxc_bbb_index_file }}'
      - 'exec {{ lxc_instance.name }} -- systemctl restart nginx'
    when: bbb_lxc_bbb_redirect_url|length and bbb_lxc_index_placeholder_stat.rc != 0

  - block:
    - name: '{{ lxc_instance.name }}: Copy recording unit timer config file'
      template:
        src: bbb/recording-unit.timer.conf.j2
        dest: "{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_record_systemd_timer.yml"
        mode: 0644

    - name: '{{ lxc_instance.name }}: Offload bbb-record systemd unit out of working hours'
      command:
        cmd: 'lxc {{ item }}'
      with_items:
        - "exec {{ lxc_instance.name }} -- sh -c 'mkdir -p $(dirname {{ bbb_lxc_recording_timer_file }}) || echo \"Dir already exists\"'"
        - 'file push {{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_record_systemd_timer.yml {{ lxc_instance.name }}{{ bbb_lxc_recording_timer_file }}'
        - 'exec {{ lxc_instance.name }} -- systemctl daemon-reload'
    when: bbb_lxc_recording_timer_enabled

  - name: '{{ lxc_instance.name }}: Remove recording unit systemd timer'
    command:
      cmd: 'lxc exec {{ lxc_instance.name }} -- {{ item }}'
    with_items:
      - 'rm {{ bbb_lxc_recording_timer_file }}'
      - 'systemctl daemon-reload'
    ignore_errors: true
    when: not bbb_lxc_recording_timer_enabled

  - name: '{{ lxc_instance.name }}: Template apply-conf script'
    template:
      src: bbb/apply-conf.sh.j2
      dest: "{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_apply_conf.sh"
      mode: 0644

  - name: '{{ lxc_instance.name }}: Check existence of apply-conf script'
    command:
      cmd: '{{ item }}'
    with_items:
      - 'lxc file pull {{ lxc_instance.name }}/etc/bigbluebutton/bbb-conf/apply-config.sh {{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_apply_conf.sh.orig'
      - 'diff {{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_apply_conf.sh {{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_apply_conf.sh.orig'
    ignore_errors: true
    register: bbb_lxc_apply_conf_stat

  - name: '{{ lxc_instance.name }}: Deploy apply config BBB script'
    command:
      cmd: 'lxc {{ item }}'
    when: bbb_lxc_apply_conf_stat.results[0].rc != 0 or bbb_lxc_apply_conf_stat.results[1].rc != 0
    register: bbb_lxc_apply_script_changed_stat
    with_items:
      - "exec {{ lxc_instance.name }} -- sh -c 'cd /etc/bigbluebutton/bbb-conf; cp apply-config.sh apply-config.sh.orig'"
      - 'file push {{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_apply_conf.sh {{ lxc_instance.name }}/etc/bigbluebutton/bbb-conf/apply-config.sh'
      - 'exec {{ lxc_instance.name }} -- chmod +x /etc/bigbluebutton/bbb-conf/apply-config.sh'

  - name: '{{ lxc_instance.name }}: Check local default slides existence'
    local_action: stat path="{{ bbb_lxc_local_slides_dir }}/{{ item }}"
    become: false
    with_items: '{{ bbb_lxc_local_slides }}'
    when: bbb_lxc_local_slides|length > 0
    register: bbb_lxc_local_slides_stat

  - set_fact:
      bbb_lxc_slides_available: "{{ bbb_lxc_local_slides|length > 0 and bbb_lxc_local_slides_stat.results[0].stat.exists
          and bbb_lxc_local_slides_stat.results[1].stat.exists }}"

  - debug:
      msg: 'Local slides PDF and PPTX files are not available at path {{ bbb_lxc_local_slides_dir }}'
    when: not bbb_lxc_slides_available|bool

  - block:
    - name: '{{ lxc_instance.name }}: Copy default presentation PDF slides'
      copy:
        src: '{{ bbb_lxc_local_slides_dir }}/{{ item }}'
        dest: '{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_{{ item }}'
      with_items: '{{ bbb_lxc_local_slides }}'
    - name: '{{ lxc_instance.name }}: Deploy default presentation PDF slides'
      command:
        cmd: 'lxc file push {{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_{{ item }} {{ lxc_instance.name }}/var/www/bigbluebutton-default/assets/{{ item }}'
      with_items: '{{ bbb_lxc_local_slides }}'
    when: bbb_lxc_slides_available|bool

  # configure turn server support
  - name: '{{ lxc_instance.name }}: Render turn server configuration xml'
    template:
      src: bbb/turn-stun-servers.xml.j2
      dest: "{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_turn-stun-servers.xml"
    when: bbb_lxc_turn_server

  - name: 'Configure stun/turn server'
    command: 'lxc {{ item }}'
    with_items:
      - exec {{ lxc_instance.name }} -- cp {{ bbb_lxc_turn_config_file }} {{ bbb_lxc_turn_config_file }}.bak-{{ ansible_date_time.epoch }}
      - file push {{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_turn-stun-servers.xml {{ lxc_instance.name }}{{ bbb_lxc_turn_config_file }}
    when: bbb_lxc_turn_server
    register: bbb_lxc_turn_configured_stat

  - name: '{{ lxc_instance.name }}: Check if UFW is enabled'
    shell: "lxc exec {{ lxc_instance.name }} -- sh -c \"ufw status | grep 'Status: active'\""

  - name: '{{ lxc_instance.name }}: Check correct bbb directory ownership'
    command: "lxc exec {{ lxc_instance.name }} -- chown -R bigbluebutton:bigbluebutton /var/bigbluebutton"

  - set_fact:
      bbb_lxc_will_restart: "{{ bbb_lxc_properties_changed_stat.changed or bbb_lxc_html5_changed_stat.changed
          or bbb_lxc_apply_script_changed_stat.changed or bbb_lxc_freeswitch_changed_stat.changed
           or bbb_lxc_turn_configured_stat.changed }}"

  - name: '{{ lxc_instance.name }}: Check default http redirect'
    command: "lxc exec {{ lxc_instance.name }} -- grep 'return 301 {{ bbb_lxc_bbb_redirect_url }};' /etc/nginx/sites-available/default"
    ignore_errors: true
    register: bbb_lxc_http_redirect_stat

  - name: '{{ lxc_instance.name }}: Set default http redirect'
    command: 'lxc exec {{ lxc_instance.name }} -- {{ item }}'
    with_items:
      - "sh -c 'sed -i \"/server_name _;/ireturn 301 {{ bbb_lxc_bbb_redirect_url }};\" /etc/nginx/sites-available/default'"
      - 'systemctl reload nginx'
    when: bbb_lxc_http_redirect_stat.rc != 0

  - import_tasks: restart_bbb.yml
    when: bbb_lxc_will_restart|bool

  - import_tasks: check_instance.yml
    when: not bbb_lxc_will_restart|bool

  always:
    - name: '{{ lxc_instance.name }}: Remove temporary container files'
      shell: 'rm {{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_*'
      ignore_errors: true

---

- fail:
    msg: Container instance name cannot be empty
  when: not lxc_instance.name|length

- name: '{{ lxc_instance.name }}: Check container existance'
  command:
    cmd: 'lxc info {{ lxc_instance.name }}'
  ignore_errors: true
  register: exists_lxc_instance_stat

- set_fact:
   lxc_instance_exists: "{{ exists_lxc_instance_stat is defined and exists_lxc_instance_stat.rc == 0 }}"

- name: '{{ lxc_instance.name }}: Check container status'
  shell: 'lxc ls {{ lxc_instance.name }} | grep STOPPED'
  ignore_errors: true
  when: lxc_instance_exists
  register: lxc_instance_status

- set_fact:
    lxc_instance_stopped: "{{ lxc_instance_status is defined and lxc_instance_status.rc|default(1) == 0 }}"

- name: 'Create and provision LXC instance {{ lxc_instance.name }}'
  block:

    - name: '{{ lxc_instance.name }}: Starting existing LXC instance'
      command:
        cmd: 'lxc start {{ lxc_instance.name }}'
      when: lxc_instance_stopped

    - name: '{{ lxc_instance.name }}: Creating LXC instance'
      command:
        cmd: 'lxc launch {{ lxc_instance.lxc_image }} {{ lxc_instance.name }} -p {{ lxc_instance.profile }} -n {{ default_route_iface }}'
      when: not lxc_instance_exists

    - name: '{{ lxc_instance.name }}: Configure nested security to LXC container'
      command: 'lxc config set {{ lxc_instance.name }} security.nesting true'

    - name: '{{ lxc_instance.name }}: Detect hostname'
      command: "lxc exec {{ lxc_instance.name }} -- cat /etc/hostname"
      register: lxc_instance_host_stat

    - name: '{{ lxc_instance.name }}: Configure container hostname'
      command: "lxc exec {{ lxc_instance.name }} -- sh -c 'echo -n \"{{ lxc_instance.hostname }}\" > /etc/hostname'"
      when: lxc_instance_host_stat.stdout|trim != lxc_instance.hostname

    - name: Determine network driver
      command: "lxc exec {{ lxc_instance.name }} -- ls /etc/netplan"
      ignore_errors: true
      register: stat_netplan

    - set_fact:
        netplan_exists: "{{ stat_netplan.rc == 0 }}"

    - name: '{{ lxc_instance.name }}: Copy network configuration template'
      template:
        src: "{{ item.template }}"
        dest: "{{ item.dest }}"
        mode: 0644
      with_items:
        - template: network-interface.cfg.j2
          dest: "{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_network.cfg"
        - template: netplan-bbb-macvlan.yaml.j2
          dest: "{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_network_netplan.yaml"
        - template: 99-disable-network-config.cfg.j2
          dest: "{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_99-disable-network-config.cfg"
        - template: bash_aliases.j2
          dest: "{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_bash_aliases"

    - name: '{{ lxc_instance.name }}: Configure container network interface'
      command:
        cmd: "lxc file push {{ item }}"
      with_items:
        - '{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_99-disable-network-config.cfg {{ lxc_instance.name }}/etc/cloud/cloud.cfg.d/99-disable-network-config.cfg'
        - '{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_bash_aliases {{ lxc_instance.name }}/root/.bash_aliases'

    - name: '{{ lxc_instance.name }}: Configure container network interface for older Ubuntu interfaced'
      command:
        cmd: "lxc file push {{ item }}"
      with_items:
        - '{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_network.cfg {{ lxc_instance.name }}/etc/network/interfaces.d/50-bbb-macvlan.cfg'
      when: not netplan_exists

    - name: '{{ lxc_instance.name }}: Configure container network interface for Ubuntu netplan network'
      command:
        cmd: "lxc file push {{ item }}"
      with_items:
        - '{{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_network_netplan.yaml {{ lxc_instance.name }}/etc/netplan/10-bbb-macvlan.yaml'
      when: netplan_exists
      register: netplan_configured

    - name: '{{ lxc_instance.name }}: Remove container network cloud config'
      command:
        cmd: 'lxc exec {{ lxc_instance.name }} rm {{ item }}'
      with_items:
        - '/etc/network/interfaces.d/50-cloud-init.cfg'
        - '/etc/netplan/50-cloud-init.yaml'
      ignore_errors: true

    - name: '{{ lxc_instance.name }}: Apply Ubuntu netplan network'
      command:
        cmd: "lxc exec {{ lxc_instance.name }} -- netplan apply"
      when: netplan_configured.changed

    - name: '{{ lxc_instance.name }}: Restart container'
      command:
        cmd: 'lxc restart {{ lxc_instance.name }}'
      retries: 3
      delay: 60
      register: stat_restart_container
      until: stat_restart_container is not failed

    - name: '{{ lxc_instance.name }}: Check internet connection'
      command:
        cmd: 'lxc exec {{ lxc_instance.name }} -- ping -c1 google.com'
      retries: 3
      delay: 15
      register: stat_container_internet
      until: stat_container_internet is not failed

    - name: '{{ lxc_instance.name }}: Update installed apt packages and cache'
      command:
        cmd: "lxc exec {{ lxc_instance.name }} -- sh -c 'sleep 10 && {{ item }}'"
      with_items:
        - 'dpkg --configure -a'
        - 'apt-get update -y'
        - 'apt-get upgrade -y --force-yes'
        - 'apt-get autoremove -y --force-yes'
      become: true
      # apt tasks can have locks acquired from other processes, retry several times before giving up.
      retries: 3
      delay: 60
      register: stat_apt_commands
      until: stat_apt_commands is not failed

    - name: '{{ lxc_instance.name }}: Install default tools and utilities'
      command:
        cmd: "lxc exec {{ lxc_instance.name }} -- apt-get install {{ item }} -y --force-yes"
      with_items: "{{ bbb_lxc_default_packages }}"

    - name: '{{ lxc_instance.name }}: Configure global git user'
      command:
        cmd: 'lxc exec {{ lxc_instance.name }} -- git config --global {{ item }}'
      with_items:
        - 'user.name "{{ lxc_instance.name }}"'
        - 'user.email "{{ lxc_instance.email }}"'
      when: "'git' in bbb_lxc_default_packages"

    - import_tasks:  install_docker.yml

  always:
    - name: '{{ lxc_instance.name }}: Remove temporary container files'
      shell: 'rm {{ bbb_lxc_tmp_dir }}/{{ lxc_instance.name }}_*'
      ignore_errors: true
